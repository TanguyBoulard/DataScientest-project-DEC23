version: '3'

services:
  fastapi:
    build: .
    container_name: fast-api
    ports:
      - "8000:8000"
  postgres:
    build:
      context: .
      dockerfile: postgres.dockerfile
    image: "postgres-data-science"
    container_name: ${PG_CONTAINER_NAME}
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data


  mongo:
    container_name: ${MG_CONTAINER_NAME}
    image: mongo
    restart: always
    ports:
      - 27017:27017
    volumes:
      - ./mongodb_data:/data/db
  mongo-express:
    container_name: ${MG_EXPRESS_CONTAINER_NAME}
    image: mongo-express
    depends_on:
      - mongo
    restart: always
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_SERVER=container_mongodb
      - ME_CONFIG_MONGODB_PORT=27017


  mongodb_test:
    image: mongo
    container_name: ${TEST_MG_CONTAINER_NAME}
    volumes:
      - ./mongodb_test_data:/data/db

  app:
    build: .
    ports:
      - "8001:8001"
    environment:
      - TZ=Europe/Paris  # Définir le fuseau horaire pour cron
    volumes:
      - ./batchs:/batchs  # Montage du répertoire batchs dans le conteneur
      - ./app:/app

    # Configuration du cron
    command: sh -c "crontab /batchs/cronjob && python /app/main.py"

  run_tests:
    image: run_tests
    container_name: run_tests
    build: .
    volumes:
      - ./app:/app
      - ./tests:/tests  # Montage du répertoire des tests dans le conteneur
    environment:
      - ENVIRONMENT=testing  # Définir l'environnement de test
    command: pytest /tests  # Exécuter les tests unitaires une fois tous les conteneurs démarrés
    depends_on:
      - app  # Assurer que tous les services sont démarrés avant d'exécuter les tests unitaires


