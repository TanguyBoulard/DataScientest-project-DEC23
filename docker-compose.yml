x-airflow-common: &airflow-common
  image: apache/airflow:latest
  environment: &airflow-common-env
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_ADMIN_USER}:${AIRFLOW_ADMIN_PASSWORD}@postgres/${AIRFLOW_DB}
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 120
    AIRFLOW_UID: "${AIRFLOW_UID}"
    AIRFLOW_GID: "${AIRFLOW_GID}"
    PYTHONPATH: /opt/airflow
    OPENWEATHER_API_KEY: ${OPENWEATHER_API_KEY}
    MONGO_USER: ${MONGO_USER}
    MONGO_PASSWORD: ${MONGO_PASSWORD}
    MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    MONGO_HOST: mongo
    MONGO_PORT: ${MONGO_PORT}
    PG_USER: ${PG_USER}
    PG_PASSWORD: ${PG_PASSWORD}
    POSTGRES_DB: ${POSTGRES_DB}
    PG_HOST: postgres
    PG_PORT: ${PG_PORT}
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- pymongo}
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./preparation:/opt/airflow/preparation
    - ./data_pipeline:/opt/airflow/data_pipeline
    - ./database:/opt/airflow/database
    - ./utils:/opt/airflow/utils
  command: ["/bin/bash", "-c", "sudo chmod -R 777 /opt/airflow/logs && sudo chmod -R 777 /opt/airflow/dags"]
  depends_on:
    postgres:
      condition: service_healthy
  networks:
    - backend

services:
  mongo:
    image: mongo:latest
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - ./database/init/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
#      - ./database/mongo_data:/data/db
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      AIRFLOW_DB: ${AIRFLOW_DB}
      AIRFLOW_USER: ${AIRFLOW_USER}
      AIRFLOW_PASSWORD: ${AIRFLOW_PASSWORD}
      AIRFLOW_ADMIN_USER: ${AIRFLOW_ADMIN_USER}
      AIRFLOW_ADMIN_PASSWORD: ${AIRFLOW_ADMIN_PASSWORD}
      API_ADMIN_USER: ${API_ADMIN_USER}
      API_ADMIN_PASSWORD: ${API_ADMIN_PASSWORD}
      API_USER: ${API_USER}
      API_PASSWORD: ${API_PASSWORD}
    ports:
      - "${PG_PORT}:5432"
    volumes:
      - ./database/init/init-postgres.sh:/docker-entrypoint-initdb.d/init-postgres.sh
      - ./database/init/init-postgres.sql:/tmp/init-postgres-tmp.sql
#      - ./database/postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  fastapi:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fastapi
    environment:
      API_USER: ${API_USER}
      API_PASSWORD: ${API_PASSWORD}
      API_PORT: ${API_PORT}
      API_HOST: ${API_HOST}
      API_DEBUG: ${API_DEBUG}
      API_SECRET_KEY: ${API_SECRET_KEY}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PG_HOST: postgres
      PG_PORT: ${PG_PORT}
      OPENWEATHER_API_KEY: ${OPENWEATHER_API_KEY}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      MONGO_HOST: mongo
      MONGO_PORT: ${MONGO_PORT}
    ports:
      - "${API_PORT}:8000"
    volumes:
      - ./api/app.py:/app/app.py
      - ./api/dash_app.py:/app/dash_app.py
    command: ["/bin/bash", "-c", "/app/start.sh"]
    healthcheck:
      test: [ "CMD", "python", "-c", "import requests; exit(0) if requests.get('http://localhost:8000/health').text == 'OK' else exit(1)" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: always
    depends_on:
      mongo:
          condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - backend

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    environment:
      <<: *airflow-common-env
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET_KEY}
    ports:
      - "${AIRFLOW_PORT}:8080"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      airflow-init:
        condition: service_healthy

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: [ "CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname \"$${HOSTNAME}\"" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      airflow-init:
        condition: service_healthy

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init \
        && \
        airflow users create \
          --username ${AIRFLOW_ADMIN_USER} \
          --password ${AIRFLOW_ADMIN_PASSWORD} \
          --firstname Admin \
          --lastname Admin \
          --role Admin \
          --email admin@example.org \
        && \
        airflow users create \
          --username ${AIRFLOW_USER} \
          --password ${AIRFLOW_PASSWORD} \
          --firstname User \
          --lastname User \
          --role Public \
          --email user@example.org
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_ADMIN_USER}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_ADMIN_PASSWORD}
    healthcheck:
      test: [ "CMD", "airflow", "db", "check" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  mongo_data:
  postgres_data:

networks:
  backend:
    driver: bridge